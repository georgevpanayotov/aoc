Parsing

- Start with the origin face (where the start point is).
- Go to that face's 0,0 and create a subgrid for the face.
- Read it. Remembering the offset from the input grid.
- traverse with a queue, adding each of the neighboring faces.
- Use cube to determine the transform.



readingOffset = Point ( // where start face is in the input
transform = Affine( //transforma Applied to points as we read.

while (queue) {
    // point: relative to readingOffset, the (0, 0) of a subgrid.
    // transform: how to convert the relative coordinates into a faceSize x faceSize space
    (origin, face, transform) = queue.remove
    subGrid = // faceSize x faceSize grid (or cube.getGrid(face))

    for (point in subGrid.range) { // TODO: actually implement this?
         // TODO: Rename .transform to .apply? Function ptr?
        subGrid[point] = inputGrid[origin + transform(point)]
    }

    for (dir in Cardinal) {
        if (isFaceAt(dir)) {
            queue.add( // TODO:
        }
    }
}

        ....    
        ....    
        ....    
        ....    
......*.....    
............    
............    
............    
        ........
        ........
        ........
        ........

  T
BLF
  BR

 TR
 F
LB
B


     ..........
     ..........
     ..........
     ..........
     ..........
     .....
     .....
     .....
     .....
     .....
..........
..........
..........
..........
..........
.....
.....
.....
.....
.....

 TR
 F
LB
B

bad guesses:
107388 too high

106392

Position(face=BOTTOM, point=Point(x=47, y=44), direction=EAST)
